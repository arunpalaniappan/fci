dnorm(1)
dnorm(2)
dnorm(3)
dnorm(0)
pnorm(0)
pnorm(1)
pnorm(2)
qnorm(0)
qnorm(1)
qnorm(0.2)
qnorm(2)
qnorm(0.5)
pnorm(0)
pnorm(0.75, lower.tail = TRUE)
qnorm(pnorm(0.75, lower.tail = TRUE), lower.tail = TRUE)
qnorm(0.8)
qnorm(0.8, 500, 10.6)
0.95 ^ 2
0.95 ^ 18
0.95 ** 18
0.95 ** 12
0.95 ** 12
0.95 ** 32
celar
clear()
0.95 ** 12
0.95 ** 22
0.95 ** 32
0.95 ** 42
1 - 0.95 ** 12
1 - 0.95 ** 22
1 - 0.95 ** 32
1 - 0.95 ** 42
library(combinat)
install.packages("combinat")
library(combinat)
combn(3, 2)
permn(3)
combn(2)
combn(2,1)
2!
factorial(3)
comb = function(n, x){
factorial(n) / (factorial(x) * factorial(n-x))
}
comb(8, 0)
comb(8, 8)
comb(8, 1)
comb(94, 12) / comb(100, 12)
comb(94, 22) / comb(100, 22)
comb(94, 32) / comb(100, 32)
pr = function(x){
(comb(94, x) + comb(94, x-1) * 6) / comb(100, x)
}
pr(12)
pr(22)
pr(32)
pr(42)
pr(10)
pr(9)
help (poisson)
help (rpois)
1 - dpois(0, 6) - dpois(1, 6) - dpois(2, 6)
1 - dpois(0, 7) - dpois(1, 7) - dpois(2, 7)
dpois(0, 7) + dpois(1, 7) + dpois(2, 7)
1 - dpois(0, 8) + dpois(1, 8) + dpois(2, 8)
1 - dpois(0, 8) - dpois(1, 8) - dpois(2, 8)
1 - dpois(0, 9) - dpois(1, 9) - dpois(2, 9)
dpois(0, 1) + dpois(1, 1)
dpois(0, 1) + dpois(1, 1) + dpois(2, 1)
qpois(0.99, 6)
qpois(0.99, 7)
qpois(0.99, 7)
qpois(0.99, 9)
qpois(0.99, 9)
qpois(0.01, 9)
qpois(0.01, 8)
qpois(0.01, 7)
qpois(0.01, 6)
#Preliminaries
#---------------------------------------------------------
rm(list = ls())
library("mvtnorm")
real_theta <- 5
sample_size <- 100
number_simulations <- 100000
install.packages("mvtnorm")
help (runif)
runif(1, 1)
runif(1)
runif(1)
runif(1)
runif(1)
runif(1)
runif(1)
runif(1, max=5)
runif(1, max=5)
simulations1 <- matrix(runif(100000, max = real_theta), ##please change ___ to get the correct value
nrow = number_simulations)
estimator_mean <- 2*apply(simulations1, 1, mean)
simulations1 <- matrix(runif(100, max = real_theta), ##please change ___ to get the correct value
nrow = number_simulations)
simulations1
runif(100, max=5)
matrix(runif(100, max=5), 2)
matrix(runif(100, max=5))
matrix(runif(100, max=5), nrow=1)
simulations1 <- matrix(runif(sample_size*100000, max = real_theta), ##please change ___ to get the correct value
nrow = number_simulations)
estimator_mean <- 2*apply(simulations1, 1, mean)
dim(estimator_mean)
estimator_mean[0]
estimator_mean[1]
estimator_mean[2]
median(c(1, 2, 3))
estimator_mean <- 2*apply(simulations1, 1, mean)
estimator_median <- 2*apply(simulations1, 1, median) ##please change ___ to get the correct value
p1 <- hist(estimator_mean, breaks = 100)
p2 <- hist(estimator_median, breaks = 100)
p1 <- hist(estimator_mean, breaks = 100)
p2 <- hist(estimator_median, breaks = 100)
range <- range(p1$mids, p2$mids )
p1$XXX = p1$density
p1
p1$XXX
plot( p1, col=rgb(1,0,0,1/4), xlim = range, xlab = "values", ylab = "density")
dev.off()
p2$counts = p2$ #please change ___ to get the correct value
pdf("histogram1.pdf")
plot( p1, col=rgb(1,0,0,1/4), xlim = range, xlab = "values", ylab = "density")
p2
p2$counts
plot( p2, col=rgb(0,0,1,1/4), add = ___)  ##please change ___ to get the correct value
plot( p1, col=rgb(1,0,0,1/4), xlim = range, xlab = "values", ylab = "density")
plot( p2, col=rgb(0,0,1,1/4), xlim = range, xlab = "values", ylab = "density")  ##please change ___ to get the correct value
plot( p2, col=rgb(0,0,1,1/4), xlim = range, xlab = "values", ylab = "density")  ##please change ___ to get the correct value
plot( p1, col=rgb(1,0,0,1/4), xlim = range, xlab = "values", ylab = "density")
pdf("histogram1.pdf")
plot( p1, col=rgb(1,0,0,1/4), xlim = range, xlab = "values", ylab = "density")
plot( p2, col=rgb(0,0,1,1/4), xlim = range, xlab = "values", ylab = "density")  ##please change ___ to get the correct value
dev.off()
simulations1 <- matrix(runif(1000*100000, max = real_theta), ##please change ___ to get the correct value
nrow = number_simulations)
help (sd)
estimator_sd <- apply(simulation1, 1, sd)
estimator_sd <- apply(simulations1, 1, sd)
#Preliminaries
#---------------------------------------------------------
rm(list = ls())
quit()
quit()
?runi
?runif
runif(100, -1, 1)
x = runif(1000 -1, 1)
x
runif(1000 -1, 1)
x = runif(1000, -1, 1)
x[1:10]
x1 = x[1:10]
x1*x1
(x1*x1)**0.5
(x1*x1)**0.5
x1
y = (x1*x1)**0.5
y = (x*x)**0.5
y[0:10]
dim(y)
length(y)
y[1:500] = -1*y[1:500]
y[1:10]
y[501:110]
y[501:510]
library(ggplot2)
plot(x, y)
y = (1 - x*x)**0.5
plot(x, y)
lm(x, y)
?lm
?as.tibble
as_tibble(x, y)
as_tibble(x)
data.frame(x, y)
df = data.frame(x, y)
df$x
library(ggplot2)
ggplot(data, aes(x, y)) + geom_point()
ggplot2(data, aes(x, y)) + geom_point()
?geom_point
ggplot(df, aes(x, y)) + geom_point()
ggplot(df, aes(x, y)) + geom_point() + geom_smooth()
ggplot(df, aes(x, y)) + geom_point() + geom_smooth(methof='lm')
ggplot(df, aes(x, y)) + geom_point() + geom_smooth(method='lm')
x = runif(10000, -1, 1)
y = (1 - x*x)**0.5
ggplot(df, aes(x, y)) + geom_point() + geom_smooth(method='lm')
y[1:5000] = -1*y[1:5000]
ggplot(df, aes(x, y)) + geom_point() + geom_smooth(method='lm')
df = data.frame(x, y)
ggplot(df, aes(x, y)) + geom_point() + geom_smooth(method='lm')
quit()
seq(1:100)
x = seq(1:100)
y = 2*x
y[30:40] = 2.5 * x[30:40]
y[45:55] = 3 * x[45:55]
y[60:70] = 2.5 * x[60:70]
df = data.frame(x, y)
library(ggplot2)
ggpoot(df, aes(x, y)) + geom_point()
ggplot(df, aes(x, y)) + geom_point()
ggplot(df, aes(x, y)) + geom_abline()
ggplot(df, aes(x, y)) + geom_point() + geom_smooth()
ggplot(df, aes(x, y)) + geom_point() + geom_smooth(method=lm)
lm(df, y ~ x)
lm(y ~ x, df)
>lm
?lm
model = lm(y ~ x, df)
model
summary(model)
model$residuals
model
summary(model)
x = seq(1:100)
y1 = y
y = 2 * x
df = data.frame(x, y, y1)
lm(y ~ x)
lm(y1 ~ x)
m1 = lm(y ~ x)
m2 = lm(y1 ~ x)
m1
m2
summary(m1)
98 / (1 - 5.556e-14)
98 * (5.556e-14) / (1 - (5.556e-14))v
98 * (5.556e-14) / (1 - (5.556e-14))
?lm
x = c(5) * 10
x
?c
c(5) ** 10
c(5, ) * 10
?repeat
()
?repeat
()
help (repeat)
?sample
x = c(4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4)
y - seq(1:length(x))
y = seq(1:length(x))
lm(x, y)
fit <- lm(y ~ x)
fit
summary(fit)
x = seq(1:100)
x1 = x
x2 = 2*x
y = x1 + x2
df = data.frame(x1, x2, y)
lm(y ~ x1 + x2, df)
fit <- lm(y ~ x1 + x2, df)
summary(fit)
zeros(10)
zeroes(10)
ones(10)
x1 = seq(1:100)
x1 = x1 - x1
x2 = x3 = x1
for i in seq(1:100)
for(i in seq(1:100))
{}
for(i in seq(1:100))
{}
for(i in seq(1:100))
{
}
3 % 2
3 %% 2
3 mod 2
?%%
5 %% 2
for(i in seq(1:100))
{
if(i %% 3 == 0)
x1[i] = 1
else if(i %% 3 == 1)
x2[i] = 1
else
x3[i] = 1
}
x1[100]
x1[99]
x2[99]
sum(x1)
sum(x1) + sum(x2) + sum(x3)
y = seq(1:100)
temp = seq(2:101)
y = temp - y
y = seq(1:100)
y[1:10]
temp[1:10]
temp = seq(2:101)
temp = seq(2:102)
temp = temp + 1
temp[1:10]
length(temp)
temp = y
temp = temp + 1
y = temp - y
fit <- lm(y ~ x1 + x2 + x3)
fut
fit
fit[1]
fit[2]
dit[3]
fit[3]
fit[4]
fit[5]
fit[6]
fit[7]
fit[8]
fit
summary(fit)
getwd()
quit()
x = seq(-100, 100)
rm(list=lm())
rm(list())
?rm
ls()
rm(list = ls())
x = seq(-100, 100)
y = 3 + 0.00001*x
fit <- lm(y ~ x)
fit
summary(fit)
library(ggplt2)
ggplot(df, aes(x, y)) + geom_point()
ggplot2(df, aes(x, y)) + geom_point()
library(ggplot2)
ggplot(df, aes(x, y)) + geom_point()
df = data.frame(x, y)
ggplot(df, aes(x, y)) + geom_point()
summary(fit)
ggplot(df, aes(x, y)) + geom_point() + geom_smooth(method=lm)
?norm
?normif
?pnorm
rnorm(0, 0.1)
rnorm(10, 0, 0.01)
dim(y)
length(y)
y = y + rnorm(length(y), 0, 0.01)
df = data.frame(x, y)
ggplot(df, aes(x, y)) + geom_point() + geom_smooth(method=lm)
fit <- lm(y ~ x)
summary(fit)
fit <- lm(y ~ x, df)
summary(fit)
y = y + rnorm(length(y), 0, 0.0001)
df = data.frame(x, y)
fit <- lm(y ~ x, df)
summary(fit)
ggplot(df, aes(x, y)) + geom_point() + geom_smooth(method=lm)
df = data.frame(x, y)
ggplot(df, aes(x, y)) + geom_point() + geom_smooth(method=lm)
y = 3 + 0.0001*x
y = y + rnorm(length(y), 0, 0.0001)
df = data.frame(x, y)
ggplot(df, aes(x, y)) + geom_point() + geom_smooth(method=lm)
y = y + rnorm(length(y), 0, 0.001)
df = data.frame(x, y)
ggplot(df, aes(x, y)) + geom_point() + geom_smooth(method=lm)
fit <- lm(y ~ x)
summary(fit)
y = y + rnorm(length(y), 0, 0.0001)
df = data.frame(x, y)
ggplot(df, aes(x, y)) + geom_point() + geom_smooth(method=lm)
fit <- lm(y ~ x)
summary(fit)
y = y + rnorm(length(y), 0, 0.1)
df = data.frame(x, y)
ggplot(df, aes(x, y)) + geom_point() + geom_smooth(method=lm)
fit <- lm(y ~ x)
summary(fit)
mean(df$y)
mean(df$y) - 3
(0 - mean(df$y) - 3) / (1.191e-04)
(0 - mean(df$y) - 3) / (1.191e-04)^2
(0 - mean(df$y) - 3) / (1.191e-04)^0.5
fit$call
fit$coefficients
fit$coefficients[1]
fit$coefficients[2]
fit$coefficients[2]
fit$effects
summary(fit)
fit$coefficients[2] / (1.191e-04)
fit$coefficients[1] / (6.911e-03)
y = 3 + 0.0001*x
y = y + rnorm(length(y), 0, 0.001)
df = data.frame(x, y)
ggplot(df, aes(x, y)) + geom_point() + geom_smooth(method=lm)
fit <- lm(y ~ x)
summary(fit)
y = y + rnorm(length(y), 0, 0.01)
y = 3 + 0.0001*x
y = y + rnorm(length(y), 0, 0.01)
df = data.frame(x, y)
ggplot(df, aes(x, y)) + geom_point() + geom_smooth(method=lm)
fit <- lm(y ~ x)
summary(fit)
y = y + rnorm(length(y), 0, 0.000001)
df = data.frame(x, y)
ggplot(df, aes(x, y)) + geom_point() + geom_smooth(method=lm)
y = 3 + 0.0001*x
y = y + rnorm(length(y), 0, 0.000001)
df = data.frame(x, y)
ggplot(df, aes(x, y)) + geom_point() + geom_smooth(method=lm)
fit <- lm(y ~ x)
summary(fit)
y = 3 + 0.001*x
y = y + rnorm(length(y), 0, 0.1)
df = data.frame(x, y)
ggplot(df, aes(x, y)) + geom_point() + geom_smooth(method=lm)
fit <- lm(y ~ x)
summary(fit)
x = seq(1:200)
dim(x)
length(x)
c(0)*100
pnorm(1, 100, 0.01)
pnorm(1, 100, 0.01)
rnorm(1, 100, 0.01)
rnorm(1, 100, 0.01)
x = seq(1, 400)
y = rnorm(200, 100, 30)
y = c(y, rnorm(200, 50, 30))
length(y)
zeroes(100)
zeros(100)
zero(100)
ones(100)
rep(0, 100)
gender = c(rep(0, 100), rep(1, 100))
x = c(rep(0, 100), rep(1, 100))
df = data.frame(x, y)
ggplot(df, aes(x, y)) + geom_point() + geom_smooth(method=lm)
x = c(rep(0, 200), rep(1, 200))
y = rnorm(200, 100, 30)
y = c(y, rnorm(200, 50, 30))
df = data.frame(x, y)
ggplot(df, aes(x, y)) + geom_point() + geom_smooth(method=lm)
fit <- lm(y ~ x)
summary(fit)
x = c(rep(0, 200), rep(1, 200))
y = rnorm(200, 100, 1)
y = c(y, rnorm(200, 50, 1))
df = data.frame(x, y)
ggplot(df, aes(x, y)) + geom_point() + geom_smooth(method=lm)
fit <- lm(y ~ x)
summary(fit)
sample.int(12, 20)
sample.int(12, 20, replace=TRUE)
edu = sample.int(12, 400, replace=TRUE)
df = data.frame(x, y, edu)
ggplot(df, aes(x, edu)) + geom_point() + geom_smooth(method=lm)
fit <- lm(y ~ x + edu)
summary(fit)
salary = edu*1000 + x*2.3 + rnorm(1, 0, 10)
fit <- lm(salary ~ x + edu)
summary(fit)
x = c(rep(0, 200), rep(1, 200))
edu = sample.int(12, 400, replace=TRUE)
salary = edu*1000 + x*2.3 + rnorm(1, 0, 1000)
fit <- lm(salary ~ x + edu)
summary(fit)
quit()
data("cars")
View(cars)
View(cars)
rm(list=ls())
data("mtcars")
View(mtcars)
setwd("C:\Users\ARUN PALANIAPPAN\Desktop\A\SEM 9\DV")
data("mtcars")
View(mtcars)
dim(mtcars)
names(mtcars)
summary(mtcars)
index(mtcars)
quit()
load("C:/Users/ARUN PALANIAPPAN/Desktop/FCI/Final Work/.RData")
source("make_datasets.R")
setwd("C:/Users/ARUN PALANIAPPAN/Desktop/FCI/Final Work")
source("make_datasets.R")
state_ao = assign_zones(state_total_ao)
print (paste('Utilisation ratio for nation ',sum(state_ao$offtake) / sum(state_ao$allotment)))
print (paste('Foodgrains wasted is ', sum(state_ao$allotment) - sum(state_ao$offtake)))
zone_ao = state_ao[c('allotment', 'offtake')] %>% aggregate(by=list(state_ao$zone), sum)
zone_ao$utilisation_ratio = zone_ao$offtake / zone_ao$allotment
zone_ao$gap = zone_ao$allotment - zone_ao$offtake
View(zone_ao)
View(state_total_ao)
View(state_total_ao)
a - 5
View(state_total_ao)
View(zone_ao)
quit()

?norm
?normif
?pnorm
rnorm(0, 0.1)
rnorm(10, 0, 0.01)
dim(y)
length(y)
y = y + rnorm(length(y), 0, 0.01)
df = data.frame(x, y)
ggplot(df, aes(x, y)) + geom_point() + geom_smooth(method=lm)
fit <- lm(y ~ x)
summary(fit)
fit <- lm(y ~ x, df)
summary(fit)
y = y + rnorm(length(y), 0, 0.0001)
df = data.frame(x, y)
fit <- lm(y ~ x, df)
summary(fit)
ggplot(df, aes(x, y)) + geom_point() + geom_smooth(method=lm)
df = data.frame(x, y)
ggplot(df, aes(x, y)) + geom_point() + geom_smooth(method=lm)
y = 3 + 0.0001*x
y = y + rnorm(length(y), 0, 0.0001)
df = data.frame(x, y)
ggplot(df, aes(x, y)) + geom_point() + geom_smooth(method=lm)
y = y + rnorm(length(y), 0, 0.001)
df = data.frame(x, y)
ggplot(df, aes(x, y)) + geom_point() + geom_smooth(method=lm)
fit <- lm(y ~ x)
summary(fit)
y = y + rnorm(length(y), 0, 0.0001)
df = data.frame(x, y)
ggplot(df, aes(x, y)) + geom_point() + geom_smooth(method=lm)
fit <- lm(y ~ x)
summary(fit)
y = y + rnorm(length(y), 0, 0.1)
df = data.frame(x, y)
ggplot(df, aes(x, y)) + geom_point() + geom_smooth(method=lm)
fit <- lm(y ~ x)
summary(fit)
mean(df$y)
mean(df$y) - 3
(0 - mean(df$y) - 3) / (1.191e-04)
(0 - mean(df$y) - 3) / (1.191e-04)^2
(0 - mean(df$y) - 3) / (1.191e-04)^0.5
fit$call
fit$coefficients
fit$coefficients[1]
fit$coefficients[2]
fit$coefficients[2]
fit$effects
summary(fit)
fit$coefficients[2] / (1.191e-04)
fit$coefficients[1] / (6.911e-03)
y = 3 + 0.0001*x
y = y + rnorm(length(y), 0, 0.001)
df = data.frame(x, y)
ggplot(df, aes(x, y)) + geom_point() + geom_smooth(method=lm)
fit <- lm(y ~ x)
summary(fit)
y = y + rnorm(length(y), 0, 0.01)
y = 3 + 0.0001*x
y = y + rnorm(length(y), 0, 0.01)
df = data.frame(x, y)
ggplot(df, aes(x, y)) + geom_point() + geom_smooth(method=lm)
fit <- lm(y ~ x)
summary(fit)
y = y + rnorm(length(y), 0, 0.000001)
df = data.frame(x, y)
ggplot(df, aes(x, y)) + geom_point() + geom_smooth(method=lm)
y = 3 + 0.0001*x
y = y + rnorm(length(y), 0, 0.000001)
df = data.frame(x, y)
ggplot(df, aes(x, y)) + geom_point() + geom_smooth(method=lm)
fit <- lm(y ~ x)
summary(fit)
y = 3 + 0.001*x
y = y + rnorm(length(y), 0, 0.1)
df = data.frame(x, y)
ggplot(df, aes(x, y)) + geom_point() + geom_smooth(method=lm)
fit <- lm(y ~ x)
summary(fit)
x = seq(1:200)
dim(x)
length(x)
c(0)*100
pnorm(1, 100, 0.01)
pnorm(1, 100, 0.01)
rnorm(1, 100, 0.01)
rnorm(1, 100, 0.01)
x = seq(1, 400)
y = rnorm(200, 100, 30)
y = c(y, rnorm(200, 50, 30))
length(y)
zeroes(100)
zeros(100)
zero(100)
ones(100)
rep(0, 100)
gender = c(rep(0, 100), rep(1, 100))
x = c(rep(0, 100), rep(1, 100))
df = data.frame(x, y)
ggplot(df, aes(x, y)) + geom_point() + geom_smooth(method=lm)
x = c(rep(0, 200), rep(1, 200))
y = rnorm(200, 100, 30)
y = c(y, rnorm(200, 50, 30))
df = data.frame(x, y)
ggplot(df, aes(x, y)) + geom_point() + geom_smooth(method=lm)
fit <- lm(y ~ x)
summary(fit)
x = c(rep(0, 200), rep(1, 200))
y = rnorm(200, 100, 1)
y = c(y, rnorm(200, 50, 1))
df = data.frame(x, y)
ggplot(df, aes(x, y)) + geom_point() + geom_smooth(method=lm)
fit <- lm(y ~ x)
summary(fit)
sample.int(12, 20)
sample.int(12, 20, replace=TRUE)
edu = sample.int(12, 400, replace=TRUE)
df = data.frame(x, y, edu)
ggplot(df, aes(x, edu)) + geom_point() + geom_smooth(method=lm)
fit <- lm(y ~ x + edu)
summary(fit)
salary = edu*1000 + x*2.3 + rnorm(1, 0, 10)
fit <- lm(salary ~ x + edu)
summary(fit)
x = c(rep(0, 200), rep(1, 200))
edu = sample.int(12, 400, replace=TRUE)
salary = edu*1000 + x*2.3 + rnorm(1, 0, 1000)
fit <- lm(salary ~ x + edu)
summary(fit)
quit()
data("cars")
View(cars)
View(cars)
rm(list=ls())
data("mtcars")
View(mtcars)
setwd("C:\Users\ARUN PALANIAPPAN\Desktop\A\SEM 9\DV")
data("mtcars")
View(mtcars)
dim(mtcars)
names(mtcars)
summary(mtcars)
index(mtcars)
quit()
data("chickwts")
View(chickwts)
data("ChickWeight")
View(ChickWeight)
df = ChickWeight
cor(df$Time, df$weight)
fit <- lm(df$weight ~ df$Time)
fit
norm(df$weight)
?norm
norm(c(1, 2, 3))
norm(c(1, 2, 3), "2")
norm(df$weight, "2")
df$Time = scale(df$Time)
df$weight = scale(df$weight)
cor(df$Time, df$weight)
View(df)
fit <- lm(df$weight ~ df$Time)
ift
fit
x = seq(1:200)
x1 = seq(2:200)
lm(x ~ x1)
lm(x[2:] ~ x1)
x[2:]
x[2,]
x[2]
x[2:200]
lm(x[2:200] ~ x1)
?lag
lag(x, 1)
x = seq(1:200)
x1 = lag(x, 1)
x2 = lag(x, 2)
df = data.frame(x, x1, x2)
x = seq(1:200)
x1 = lag(x, 1)
x2 = lag(x, 2)
df = data.frame(x, x1, x2)
lag(x, 2)
ts(x)
x = ts(seq(1:200))
x1 = lag(x, 1)
x2 = lag(x, 2)
df = data.frame(x, x1, x2)
x = ts(seq(1:200))
x1 = lag(x, 1)
x2 = lag(x, 2)
x = ts(seq(1:10))
x1 = lag(x, 1)
x1[0:9]
x1[1:9]
x1[1:10]
x1[0]
x2 = lag(x, 2)
x2[0]
x2[-1]
x[-2]
x[-1]
x[-2]
x[-1][-1]
x = tsp(seq(1:10))
tsData <- EuStockMarkets[, 1]
tsData
decomposeRes <- decompose(tsData, type="mult")
decomposeRes
plot(decomposeRes)
View(EuStockMarkets)
tsData <- EuStockMarkets[, 1]
acf(tsData)
pacf(tsData)
n = length(tsData)
lm(tsData[2:n] ~ tsData[1:n-1])
lm(tsData[3:n] ~ tsData[2:n-1] + tsData[1:n-2])
n - 1 + 2
n - 3
n
n - 3 + 1
length(tsData[3:n])
length(tsData[2:n-1)
length(tsData[2:n-1])
length(tsData[1:n-2])
length(tsData[1:n-2])
tsData[1:n-2]
tsData[1:(n-1)]
lm(tsData[3:n] ~ tsData[2:(n-1)] + tsData[1:(n-2])])
lm(tsData[3:n] ~ tsData[2:(n-1)] + tsData[1:(n-2)])
lag(tsData, 2)
length(lag(tsData, 2))
length(lag(tsData, 3))
tsData1 = lag(tsData, 1)
tsData2 = lag(tsData, 2)
lm(tsData ~ tsData1 + tsData2)
lm(tsData ~ tsData1 )
a = seq(1:10)
shift(a, 1, type="lag")
library(data.table)
shift(a, 1, type="lag")
shift(a, 2, type="lag")
quit()
quit()
getwd()
quit()
library(dplyr)
library(tidyverse)
View(AirPassengers)
View(airquality)
quit()
setwd("C:/Users/ARUN PALANIAPPAN/Desktop/FCI/Final Work")
#This program is used to generate all the required datasets.
rm(list=ls())
#Notes: Orissa should be Odisha, Pondicherry should be puducherry.
suppressPackageStartupMessages(library(openxlsx))
library(dplyr)
library(tidyverse)
library(reshape2)
library(ggplot2)
library(e1071)
remove_outliers <- function(data_set, cols)
{
#cols = names(all_off)[-1:-2]
#data_set = all_off
#Columns is a list of columns for which outlier is to be removed
idxs = c()
# col = "allotment" - recently removed. Probably this line is useless
for(col in cols)
{
mn = lapply(data_set[col], mean)
std = sd(data_set[[col]])
#Outliers are points where are away from mean by 3*std
idxs = c(idxs, which(data_set[col] > (mn[[1]] + 3*std) | data_set[col] < (mn[[1]] - 3*std)))
}
idxs = unique(idxs)
if(length(idxs) > 0)
data_set = data_set[-idxs, ]
return (data_set)
}
# #Stricter removal of outliers
# remove_outliers_strict <- function(data_set, cols)
# {
#   #cols = names(all_off)[-1:-2]
#   #data_set = all_off
#   #Columns is a list of columns for which outlier is to be removed
#   idxs = c()
#   #col = "allotment"
#   for(col in cols)
#   {
#     lb = quantile(data_set[[col]], 0.1)
#     ub = quantile(data_set[[col]], 0.9)
#     #Outliers are points where are away from mean by 3*std
#     idxs = c(idxs, which(data_set[col] > ub | data_set[col] < lb))
#   }
#   idxs = unique(idxs)
#   if(length(idxs) > 0)
#     data_set = data_set[-idxs, ]
#   return (data_set)
# }
#Follows zonal rankings as per FCI
assign_zones <- function(df)
{
df$zone = 0
df$zone[which(df$State.UT %in% c("BIHAR", "JHARKHAND", "ORISSA",
"WEST BENGAL", "SIKKIM"))] = "EAST ZONE"
df$zone[which(df$State.UT %in% c("ASSAM", "ARUNACHAL", "MEGHALAYA",
"MIZORAM", "TRIPURA", "MANIPUR", "NAGALAND"))] = "N.E ZONE"
df$zone[which(df$State.UT %in% c("DELHI", "HARYANA", "HIMACHAL", "J & K",
"PUNJAB", "CHANDIGARH", "RAJASTHAN", "UTTAR PR", "UTTRANCHAL"))] = "NORTH ZONE"
df$zone[which(df$State.UT %in% c("ANDHRA PR", "A&N ISLANDS", "TELANGANA", "KERALA",
"KARNATAKA", "TAMILNADU", "PONDICHERRY", "LAKSHADWEEP"))] = "SOUTH ZONE"
df$zone[which(df$State.UT %in% c("GUJARAT", "MAHARASHTRA", "GOA", "MADHYA PR",
"CHHATTISGARH", "DAMAN & DIU", "D&N HAVELI"))] = "WEST ZONE"
return (df)
}
generate_bpl_data <- function(pop, bpl, bpl_cr)
{
# bpl_cr - bpl change rate
# bpl_cr > 0 Ex: bpl_cr = 0.3 => bpl(2011, tn) = 19.5%, bpl(2012, tn) = 19.8%
states = unique(bpl$State.UT)
for(state in states)
{
perc = bpl[which(bpl$State.UT == state & bpl$year == 2011),"percent"]
for(year in 2012:2019)
{
perc = perc + bpl_cr
new_entry <- data.frame(state, year, perc)
names(new_entry) <- c("State.UT", "year", "percent")
bpl <- rbind(bpl, new_entry)
}
}
#Removing entries for andhra pradesh after 2013
#AP was bifurcated in 2013 and bpl data for 2011 is of united AP
state = "ANDHRA PR"
bpl = bpl[-which(bpl$State.UT == state & bpl$year > 2013),]
#Removing entries where bpl percent is less than 0
bpl = inner_join(bpl, pop, on=c("State.UT", "year"))
bpl$bpl_pop = (bpl$percent * bpl$Population / 100)
bpl = bpl %>% filter(bpl_pop > 0)
bpl$log_bplpop = log(bpl$bpl_pop)
return (bpl)
}
rice <- read.xlsx("Data/rice.xlsx")
wheat <- read.xlsx("Data/wheat.xlsx")
rice <- remove_outliers(rice, c("allotment", "offtake"))
wheat <- remove_outliers(wheat, c("allotment", "offtake"))
#Splitting of states into rice consuming and wheat consuming
#rice_state = rice %>% group_by(State.UT) %>%
# summarise(allotment = sum(allotment))
rice_summary = rice %>% group_by(State.UT) %>%
summarise(allotment = sum(allotment))
names(rice_summary)[2] = "rice_allotment"
#wheat_state = wheat %>% group_by(State.UT) %>%
#summarise(allotment = sum(allotment))
wheat_summary = wheat %>% group_by(State.UT) %>%
summarise(allotment = sum(allotment))
names(wheat_summary)[2] = "wheat_allotment"
rice_wheat = inner_join(rice_summary, wheat_summary, by=c('State.UT'))
rice_wheat$perc_rice = rice_wheat$rice_allotment / (rice_wheat$rice_allotment + rice_wheat$wheat_allotment)
rice_wheat$perc_wheat = rice_wheat$wheat_allotment / (rice_wheat$rice_allotment + rice_wheat$wheat_allotment)
#Total allotment offtake
all_off = inner_join(rice, wheat, by=c('State.UT', 'year'))
all_off$offtake = all_off$offtake.x + all_off$offtake.y
all_off$allotment = all_off$allotment.x + all_off$allotment.y
all_off$zone = all_off$zone.x
all_off$offtake.x = all_off$offtake.y = all_off$zone.x = NULL
all_off$allotment.x = all_off$allotment.y = all_off$zone.y = NULL
all_off$utilisation_ratio = all_off$offtake / all_off$allotment
#Aggreagating of states to get year wise data
year_total_ao = all_off %>% group_by(year) %>%
summarise(allotment = sum(allotment), offtake = sum(offtake))
all_off = remove_outliers(all_off, c("allotment", "offtake", "utilisation_ratio"))
# df = all_off
# df$zone = df$allotment = df$offtake = NULL
# df = spread(df, year, -State.UT)
# for(col in names(df)[-1])
# {
#   df[col] = round(df[col], 2)
# }
# write.xlsx(df, "Data/utilisation_ratio_state_wise_2010_2019.xlsx")
ur = read.xlsx("Data/utilisation_ratio_state_wise_2010_2019.xlsx")
#rice$grain = "rice"
#wheat$grain = "wheat"
#rice_wheat = rbind(rice, wheat)
#Summary of total all_off state wise
state_ao = read.xlsx("Data/state_ao 2003-19.xlsx")
#Getting road length data
road_l <- read.xlsx("Data/Road Length 2010-16.XLSX")
road_l <- gather(road_l, key='year', value='ro_length', -one_of('State.UT'))
road_l <- road_l[complete.cases(road_l),]
road_l$year = as.numeric(road_l$year)
road_l$ro_log_length = log(road_l$ro_length)
road_l <- remove_outliers(road_l, c("ro_length", "ro_log_length"))
#Getting road density data
#Road density was made using dividing length of road and area of state
roadd_sqkm <- read.xlsx("Data/Road Density per sq km 2010-16.xlsx")
roadd_sqkm <- gather(roadd_sqkm, key='year', value='ro_density', -one_of('State.UT'))
roadd_sqkm <- roadd_sqkm[complete.cases(roadd_sqkm),]
roadd_sqkm$ro_log_density = log(roadd_sqkm$ro_density)
roadd_sqkm$year = as.numeric(roadd_sqkm$year)
roadd_sqkm <- remove_outliers(roadd_sqkm, c("ro_density", "ro_log_density"))
#Getting state highway length
sh_l <- read.xlsx("Data/SH Length 2011-16.xlsx")
sh_l <- gather(sh_l, key='year', value='sh_length', -one_of('State.UT'))
sh_l <- sh_l[complete.cases(sh_l),]
sh_l$sh_log_length = log(sh_l$sh_length)
sh_l$year = as.numeric(sh_l$year)
sh_l <- remove_outliers(sh_l, names(sh_l)[-1:-2])
#Getting state highway density
sh_d <- read.xlsx("Data/SH Density 2011-16.xlsx")
sh_d <- gather(sh_d, key='year', value='sh_density', -one_of('State.UT'))
sh_d <- sh_d[complete.cases(sh_d),]
sh_d$sh_log_density = log(sh_d$sh_density)
sh_d$year = as.numeric(sh_d$year)
sh_d <- remove_outliers(sh_d, names(sh_d)[-1:-2])
#Getting railway length data
rw_l <- read.xlsx("Data/Railway Length 2011-17.xlsx")
rw_l <- gather(rw_l, key='year', value='rw_length', -one_of('State.UT'))
rw_l <- rw_l[complete.cases(rw_l),]
rw_l$rw_log_length = log(rw_l$rw_length)
rw_l$year = as.numeric(rw_l$year)
rw_l <- remove_outliers(rw_l, names(rw_l)[-1:-2])
#Getting railway density data
rw_d <- read.xlsx("Data/Railway Density per sq km 2011-17.xlsx")
rw_d <- gather(rw_d, key='year', value='rw_density', -one_of('State.UT'))
rw_d <- rw_d[complete.cases(rw_d),]
rw_d$rw_log_density = log(rw_d$rw_density)
rw_d$year = as.numeric(rw_d$year)
#Getting GSDP data
gsdp <- read.xlsx("Data/GSDP Current Price 2011-20.xlsx")
gsdp = gather(gsdp, key='year', value='gsdp', -one_of('State.UT'))
gsdp$year = substr(gsdp$year, 1, 4)
gsdp = gsdp[complete.cases(gsdp),]
gsdp$log_gsdp = log(gsdp$gsdp)
gsdp$year = as.numeric(gsdp$year)
#Aggregating of years to get state wise data
state_total_ao = all_off %>% group_by(State.UT) %>%
summarise(allotment = sum(allotment), offtake = sum(offtake))
## Making district office count
#The below code is for making district wise offtake allotment
add_row_entries_sao <- function(sao, idx1, idx2)
{
sao[idx1,]$allotment = sao[idx1, ]$allotment + sao[idx2, ]$allotment
sao[idx1,]$offtake = sao[idx1, ]$offtake + sao[idx2, ]$offtake
sao = sao[-idx2, ]
return (sao)
}
make_district_office_count <- function(sao, fci_do_count)
{
sao = add_row_entries_sao(sao, which(sao$State.UT == "PUNJAB"), which(sao$State.UT == "CHANDIGARH"))
sao = add_row_entries_sao(sao, which(sao$State.UT == "TAMILNADU"), which(sao$State.UT == "PONDICHERRY"))
sao = add_row_entries_sao(sao, which(sao$State.UT == "ANDHRA PR"), which(sao$State.UT == "TELANGANA"))
sao = add_row_entries_sao(sao, which(sao$State.UT == "ANDHRA PR"), which(sao$State.UT == "A&N ISLANDS"))
sao = add_row_entries_sao(sao, which(sao$State.UT == "KARNATAKA"), which(sao$State.UT == "LAKSHADWEEP"))
sao = add_row_entries_sao(sao, which(sao$State.UT == "WEST BENGAL"), which(sao$State.UT == "SIKKIM"))
sao = add_row_entries_sao(sao, which(sao$State.UT == "MAHARASHTRA"), which(sao$State.UT == "GOA"))
sao = add_row_entries_sao(sao, which(sao$State.UT == "GUJARAT"), which(sao$State.UT == "D&N HAVELI"))
sao = add_row_entries_sao(sao, which(sao$State.UT == "GUJARAT"), which(sao$State.UT == "DAMAN & DIU"))
sao = add_row_entries_sao(sao, which(sao$State.UT == "MEGHALAYA"), which(sao$State.UT == "MIZORAM"))
sao = add_row_entries_sao(sao, which(sao$State.UT == "MEGHALAYA"), which(sao$State.UT == "TRIPURA"))
sao = add_row_entries_sao(sao, which(sao$State.UT == "NAGALAND"), which(sao$State.UT == "MANIPUR"))
sao = inner_join(sao, fci_do_count, by=c("State.UT"))
return (sao)
}
fci_do_count = read.xlsx("Data/FCI District Office Count.xlsx")
sao <- make_district_office_count(state_total_ao, fci_do_count)
sao$ao_gap = sao$allotment - sao$offtake
sao$utilisation_ratio = sao$offtake / sao$allotment
sao <- remove_outliers(sao, c("utilisation_ratio", "do_count"))
#DCP Analysis
rice$grain = "rice"
wheat$grain = "wheat"
df_dcp = rbind(rice, wheat)
rice$grain = wheat$grain = NULL
df_dcp$dcp = 0
dcp_status <- read.xlsx("Data/DCP Status.xlsx")
dcp_status = dcp_status[complete.cases(dcp_status),]
#wef - with effect from. The year from which dcp is with effect
for(i in 1:dim(dcp_status)[1])
{
year = dcp_status[i, ]$wef
state = dcp_status[i, ]$State.UT
grain = dcp_status[i, ]$grain
idxs = which(df_dcp$year >= year & df_dcp$State.UT == state & df_dcp$grain == grain)
df_dcp[idxs, ]$dcp = 1
}
df_dcp$utilisation_ratio = df_dcp$offtake / df_dcp$allotment
df_dcp <- df_dcp[complete.cases(df_dcp), ]
df_dcp <- df_dcp[is.finite(df_dcp$utilisation_ratio),]
df_dcp <- df_dcp[which(df_dcp$utilisation_ratio <= 1), ]
df_dcp <- remove_outliers(df_dcp, c("utilisation_ratio"))
#Reading population data
pop <- read.xlsx("Data/projected_population_by_state_2012_2036.xlsx")
pop$log_pop = log(pop$Population)
#Reading BPL Population data
bpl_perc2011 <- read.xlsx("Data/BPL data.xlsx")
names(bpl_perc2011)[2] = "percent"
bpl_perc2011$year = 2011
ao_road = inner_join(all_off, road_l, by=c('State.UT', 'year'))
ao_road$offtake = ao_road$allotment = ao_road$zone = NULL
ao_road = inner_join(ao_road, roadd_sqkm, by=c('State.UT', 'year'))
ao_road = ao_road[which(ao_road$utilisation_ratio < 1 & ao_road$utilisation_ratio > 0),]
fit <- lm(utilisation_ratio ~ ro_log_length, ao_road)
summary(fit)$r.squared
fit
summary(fit)
quit()
